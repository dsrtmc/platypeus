schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

type Chatbox {
  messages: [Message!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CreateChatboxPayload {
  chatbox: Chatbox
}

type CreateRacePayload {
  race: Race
  errors: [CreateRaceError!]
}

type CreateScorePayload {
  score: Score
}

type DeleteUserPayload {
  boolean: Boolean
}

type FinishRaceForUserPayload {
  race: Race
  errors: [FinishRaceForUserError!]
}

type FinishRacePayload {
  race: Race
  errors: [FinishRaceError!]
}

type IncorrectCredentialsError implements Error {
  message: String!
}

type InvalidFieldError implements Error {
  message: String!
}

type InvalidRaceError implements Error {
  message: String!
}

type InvalidRacerStatisticsError implements Error {
  message: String!
}

type InvalidUserError implements Error {
  message: String!
}

type JoinChatboxPayload {
  chatbox: Chatbox
}

type JoinRacePayload {
  race: Race
}

type LeaveRacePayload {
  race: Race
}

type LoginPayload {
  user: User
  errors: [LoginError!]
}

type LogoutPayload {
  boolean: Boolean
}

type Message {
  author: User!
  chatbox: Chatbox!
  content: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  deleteUser(input: DeleteUserInput!): DeleteUserPayload!
  register(input: RegisterInput!): RegisterPayload!
  login(input: LoginInput!): LoginPayload!
  logout: LogoutPayload!
  createScore(input: CreateScoreInput!): CreateScorePayload!
  updateStatsForUser(input: UpdateStatsForUserInput!): UpdateStatsForUserPayload!
  finishRace(input: FinishRaceInput!): FinishRacePayload!
  finishRaceForUser(input: FinishRaceForUserInput!): FinishRaceForUserPayload!
  runRace(input: RunRaceInput!): RunRacePayload!
  startRace(input: StartRaceInput!): StartRacePayload!
  joinRace(input: JoinRaceInput!): JoinRacePayload!
  leaveRace(input: LeaveRaceInput!): LeaveRacePayload!
  createRace(input: CreateRaceInput!): CreateRacePayload!
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  joinChatbox(input: JoinChatboxInput!): JoinChatboxPayload!
  createChatbox: CreateChatboxPayload!
}

type NotAuthenticatedError implements Error {
  message: String!
}

type NotAuthorizedError implements Error {
  message: String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  me: User
  usersBestScores(userId: UUID!): [Score]!
  userByUsername(username: String!): User
  userById(id: UUID!): User
  bye: String! @authorize
  allUsers: [User!]!
  allScores: [Score!]!
  scores("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ScoreFilterInput order: [ScoreSortInput!]): ScoresConnection
  score(id: UUID!): Score
  racers(raceId: UUID!): [Racer!]!
  races("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: RaceFilterInput order: [RaceSortInput!]): RacesConnection
  allRaces: [Race!]!
  hello: String!
  allChatboxes: [Chatbox!]!
}

type Race {
  host: User!
  racers: [Racer!]!
  mode: String!
  modeSetting: Int!
  content: String!
  started: Boolean!
  running: Boolean!
  finished: Boolean!
  private: Boolean!
  password: String
  startTime: DateTime!
  chatboxId: UUID!
  chatbox: Chatbox!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Racer {
  race: Race!
  user: User!
  wpm: Int!
  wordsTyped: Int!
  finished: Boolean!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"A connection to a list of items."
type RacesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RacesEdge!]
  "A flattened list of the nodes."
  nodes: [Race!]
}

"An edge in a connection."
type RacesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Race!
}

type RegisterPayload {
  user: User
  errors: [RegisterError!]
}

type RunRacePayload {
  race: Race
  errors: [RunRaceError!]
}

type Score {
  wpm: Int!
  rawWpm: Int!
  mode: String!
  modeSetting: Int!
  content: String!
  language: String!
  accuracy: Float!
  wpmStats: [Int!]!
  rawStats: [Int!]!
  user: User
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"A connection to a list of items."
type ScoresConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ScoresEdge!]
  "A flattened list of the nodes."
  nodes: [Score!]
}

"An edge in a connection."
type ScoresEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Score!
}

type SendMessagePayload {
  boolean: Boolean
}

type StartRacePayload {
  race: Race
  errors: [StartRaceError!]
}

type Subscription {
  onRaceEvent(raceId: UUID!): Race!
  onChatboxEvent(chatboxId: UUID!): Chatbox!
}

type TooFewRacersError implements Error {
  message: String!
}

type UpdateStatsForUserPayload {
  race: Race
  errors: [UpdateStatsForUserError!]
}

type User {
  username: String!
  email: String!
  password: String!
  scores: [Score!]!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsernameTakenError implements Error {
  message: String!
}

union CreateRaceError = NotAuthenticatedError

union FinishRaceError = InvalidRaceError

union FinishRaceForUserError = InvalidRaceError | InvalidUserError | InvalidRacerStatisticsError

union LoginError = InvalidFieldError | IncorrectCredentialsError

union RegisterError = InvalidFieldError | UsernameTakenError

union RunRaceError = InvalidRaceError | NotAuthenticatedError | NotAuthorizedError

union StartRaceError = InvalidRaceError | NotAuthenticatedError | NotAuthorizedError | TooFewRacersError

union UpdateStatsForUserError = InvalidUserError | InvalidRaceError | InvalidRacerStatisticsError

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ChatboxFilterInput {
  and: [ChatboxFilterInput!]
  or: [ChatboxFilterInput!]
  messages: ListFilterInputTypeOfMessageFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input ChatboxSortInput {
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input CreateRaceInput {
  isPrivate: Boolean!
  mode: String!
  modeSetting: Int!
  content: String!
  password: String
}

input CreateScoreInput {
  wpm: Int!
  rawWpm: Int!
  mode: String!
  modeSetting: Int!
  content: String!
  accuracy: Float!
  wpmStats: [Int!]!
  rawStats: [Int!]!
  language: String!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DeleteUserInput {
  userId: UUID!
}

input FinishRaceForUserInput {
  userId: UUID!
  raceId: UUID!
}

input FinishRaceInput {
  raceId: UUID!
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input JoinChatboxInput {
  userId: UUID!
  chatboxId: UUID!
}

input JoinRaceInput {
  userId: UUID
  raceId: UUID!
  password: String
}

input LeaveRaceInput {
  userId: UUID!
  raceId: UUID!
}

input ListFilterInputTypeOfMessageFilterInput {
  all: MessageFilterInput
  none: MessageFilterInput
  some: MessageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRacerFilterInput {
  all: RacerFilterInput
  none: RacerFilterInput
  some: RacerFilterInput
  any: Boolean
}

input ListFilterInputTypeOfScoreFilterInput {
  all: ScoreFilterInput
  none: ScoreFilterInput
  some: ScoreFilterInput
  any: Boolean
}

input ListIntOperationFilterInput {
  all: IntOperationFilterInput
  none: IntOperationFilterInput
  some: IntOperationFilterInput
  any: Boolean
}

input LoginInput {
  username: String
  password: String
}

input MessageFilterInput {
  and: [MessageFilterInput!]
  or: [MessageFilterInput!]
  author: UserFilterInput
  chatbox: ChatboxFilterInput
  content: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input RaceFilterInput {
  and: [RaceFilterInput!]
  or: [RaceFilterInput!]
  host: UserFilterInput
  racers: ListFilterInputTypeOfRacerFilterInput
  mode: StringOperationFilterInput
  modeSetting: IntOperationFilterInput
  content: StringOperationFilterInput
  started: BooleanOperationFilterInput
  running: BooleanOperationFilterInput
  finished: BooleanOperationFilterInput
  private: BooleanOperationFilterInput
  password: StringOperationFilterInput
  startTime: DateTimeOperationFilterInput
  chatboxId: UuidOperationFilterInput
  chatbox: ChatboxFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input RaceSortInput {
  host: UserSortInput
  mode: SortEnumType
  modeSetting: SortEnumType
  content: SortEnumType
  started: SortEnumType
  running: SortEnumType
  finished: SortEnumType
  private: SortEnumType
  password: SortEnumType
  startTime: SortEnumType
  chatboxId: SortEnumType
  chatbox: ChatboxSortInput
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input RacerFilterInput {
  and: [RacerFilterInput!]
  or: [RacerFilterInput!]
  race: RaceFilterInput
  user: UserFilterInput
  wpm: IntOperationFilterInput
  wordsTyped: IntOperationFilterInput
  finished: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input RegisterInput {
  username: String
  email: String
  password: String
}

input RunRaceInput {
  raceId: UUID!
}

input ScoreFilterInput {
  and: [ScoreFilterInput!]
  or: [ScoreFilterInput!]
  wpm: IntOperationFilterInput
  rawWpm: IntOperationFilterInput
  mode: StringOperationFilterInput
  modeSetting: IntOperationFilterInput
  content: StringOperationFilterInput
  language: StringOperationFilterInput
  accuracy: FloatOperationFilterInput
  wpmStats: ListIntOperationFilterInput
  rawStats: ListIntOperationFilterInput
  user: UserFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input ScoreSortInput {
  wpm: SortEnumType
  rawWpm: SortEnumType
  mode: SortEnumType
  modeSetting: SortEnumType
  content: SortEnumType
  language: SortEnumType
  accuracy: SortEnumType
  user: UserSortInput
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input SendMessageInput {
  userId: UUID!
  chatboxId: UUID!
  content: String!
}

input StartRaceInput {
  raceId: UUID!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateStatsForUserInput {
  userId: UUID!
  raceId: UUID!
  wpm: Int!
  wordsTyped: Int!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  username: StringOperationFilterInput
  email: StringOperationFilterInput
  password: StringOperationFilterInput
  scores: ListFilterInputTypeOfScoreFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input UserSortInput {
  username: SortEnumType
  email: SortEnumType
  password: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum SortEnumType {
  ASC
  DESC
}

directive @allowAnonymous repeatable on FIELD_DEFINITION

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")